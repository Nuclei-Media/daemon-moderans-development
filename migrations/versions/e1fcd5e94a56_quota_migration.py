"""quota migration

Revision ID: e1fcd5e94a56
Revises: 
Create Date: 2023-09-02 23:39:28.469984

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "e1fcd5e94a56"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "User",
        sa.Column("id", sa.TEXT(), autoincrement=False, nullable=False),
        sa.Column("email", sa.TEXT(), autoincrement=False, nullable=False),
        sa.Column("username", sa.TEXT(), autoincrement=False, nullable=False),
        sa.Column("password", sa.TEXT(), autoincrement=False, nullable=False),
        sa.PrimaryKeyConstraint("id", name="User_pkey"),
        postgresql_ignore_search_path=False,
    )
    op.create_index("User_email_key", "User", ["email"], unique=False)
    op.create_table(
        "_prisma_migrations",
        sa.Column("id", sa.VARCHAR(length=36), autoincrement=False, nullable=False),
        sa.Column(
            "checksum", sa.VARCHAR(length=64), autoincrement=False, nullable=False
        ),
        sa.Column(
            "finished_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "migration_name",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("logs", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column(
            "rolled_back_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "started_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "applied_steps_count",
            sa.INTEGER(),
            server_default=sa.text("0"),
            autoincrement=False,
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id", name="_prisma_migrations_pkey"),
    )
    op.create_table(
        "data_storage",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("file_name", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("file_cid", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("file_hash", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("file_size", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("file_type", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("file_upload_date", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("owner_id", postgresql.UUID(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(
            ["owner_id"], ["users.id"], name="data_storage_owner_id_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="data_storage_pkey"),
    )
    op.create_index("ix_data_storage_id", "data_storage", ["id"], unique=False)
    op.create_table(
        "user_quota",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("user_quota", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "last_update", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.Column("amount_of_files", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("owner_id", postgresql.UUID(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(
            ["owner_id"], ["users.id"], name="user_quota_owner_id_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="user_quota_pkey"),
    )
    op.create_index("ix_user_quota_id", "user_quota", ["id"], unique=False)
    op.create_table(
        "WishlistItem",
        sa.Column(
            "id",
            sa.INTEGER(),
            server_default=sa.text("nextval('\"WishlistItem_id_seq\"'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("userId", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column("product", sa.TEXT(), autoincrement=False, nullable=False),
        sa.Column(
            "url",
            sa.TEXT(),
            server_default=sa.text("''::text"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "date",
            postgresql.TIMESTAMP(precision=3),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("current_price", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("wishlistId", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(
            ["userId"],
            ["User.id"],
            name="WishlistItem_userId_fkey",
            onupdate="CASCADE",
            ondelete="SET NULL",
        ),
        sa.ForeignKeyConstraint(
            ["wishlistId"],
            ["Wishlist.id"],
            name="WishlistItem_wishlistId_fkey",
            onupdate="CASCADE",
            ondelete="SET NULL",
        ),
        sa.PrimaryKeyConstraint("id", name="WishlistItem_pkey"),
    )
    op.create_table(
        "Wishlist",
        sa.Column(
            "id",
            sa.INTEGER(),
            server_default=sa.text("nextval('\"Wishlist_id_seq\"'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("userId", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column("wishlistName", sa.TEXT(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["userId"],
            ["User.id"],
            name="Wishlist_userId_fkey",
            onupdate="CASCADE",
            ondelete="SET NULL",
        ),
        sa.PrimaryKeyConstraint("id", name="Wishlist_pkey"),
    )
    op.create_index(
        "Wishlist_wishlistName_key", "Wishlist", ["wishlistName"], unique=False
    )
    op.create_table(
        "users",
        sa.Column("id", postgresql.UUID(), autoincrement=False, nullable=False),
        sa.Column("email", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("username", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("hashed_password", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("is_active", sa.BOOLEAN(), autoincrement=False, nullable=True),
        sa.PrimaryKeyConstraint("id", name="users_pkey"),
    )
    op.create_index("ix_users_username", "users", ["username"], unique=False)
    op.create_index("ix_users_id", "users", ["id"], unique=False)
    op.create_index("ix_users_email", "users", ["email"], unique=False)
    # ### end Alembic commands ###
